on:
  workflow_call:

jobs:
  publish:
    runs-on: ubuntu-22.04

    env:
      HIVE_TOKEN: ${{ secrets.HIVE_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: setup environment
        uses: ./.github/actions/setup
        with:
          codegen: false # no need to run because release script will run it anyway
          actor: release-stable
          cacheNext: false
          cacheTurbo: true

      - name: prepare npm credentials
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> $HOME/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: publish stable
        id: changesets
        uses: changesets/action@v1.4.5
        with:
          publish: pnpm release
          commit: 'chore(release): update monorepo packages versions'
          title: 'Upcoming Release Changes'
        env:
          GITHUB_TOKEN: ${{ secrets.GUILD_BOT_TOKEN }}

      - name: extract published version
        if:
          steps.changesets.outputs.published && contains(steps.changesets.outputs.publishedPackages,
          '"@graphql-hive/cli"')
        id: cli
        run: |
          echo '${{steps.changesets.outputs.publishedPackages}}' > cli-ver.json
          VERSION=`echo $(jq -r '.[] | select(.name | endswith("@graphql-hive/cli")).version' cli-ver.json)`
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "publish=true" >> $GITHUB_OUTPUT

      - name: Setup Deno
        if: steps.cli.outputs.publish == 'true'
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: compile binaries
        if: steps.cli.outputs.publish == 'true'
        working-directory: ./packages/libraries/cli
        run: pnpm compile

      - name: push and tag binaries
        uses: EndBug/add-and-commit@v9
        if: steps.cli.outputs.publish == 'true'
        with:
          # The arguments for the `git add` command (see the paragraph below for more info)
          add: 'packages/libraries/cli/binaries'
          message: 'Release CLI ${{ steps.cli.outputs.version }}'
          new_branch: release-cli-${{ steps.cli.outputs.version }}
          pathspec_error_handling: exitAtEnd

          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          push: true

          # Arguments for the git tag command (the tag name always needs to be the first word not preceded by an hyphen)
          tag: 'cli-${{ steps.cli.outputs.version }} --force'

          # Arguments for the git push --tags command (any additional argument will be added after --tags)
          tag_push: '--force'
